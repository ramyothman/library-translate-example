{"version":3,"file":"ngx-translate-multi-http-loader.js","sources":["ngx-translate-multi-http-loader/projects/ngx-translate/multi-http-loader/src/lib/multi-http-loader.ts"],"names":[],"mappings":";;;;;;;;AAYA,MAAA,wBAAA,CAAA;AAAE;AAAQ;AAAuB;AAA4B;AAC3D,IAAA,WAAF,CACY,IADZ,EAEY,SAFZ,EAAA;AAAE,QACU,IAAZ,CAAA,IAAgB,GAAJ,IAAI,CAAhB;AAAC,QACW,IAAZ,CAAA,SAAqB,GAAT,SAAS,CAArB;AAAC,KACK;AACN;AACO;AAAuB;AAAmB;AACjD,IADS,cAAc,CAAC,IAAY,EAApC;AAAE,QACE,uBAAM,QAAQ,GAAG,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,QAAQ,IAAhD;AAAE,YACI,uBAAM,IAAI,GAAG,QAAQ,CAAC,MAAM,GAAG,IAAI,GAAG,QAAQ,CAAC,MAAM,CAAC;AAC5D,YAAM,OAAO,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,GAAG,IAApD;AAAE,gBACM,OAAO,CAAC,KAAK,CAAC,kCAAkC,EAAE,IAAI,CAAC,CAAC;AAChE,gBAAQ,OAAO,EAAE,CAAC,EAAE,CAAC,CAAC;AACtB,aAAO,CAAC,CAAC,CAAC;AACV,SAAK,CAAC,CAAC;AACP,QAAI,OAAO,QAAQ,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,QAAQ,IAAI,KAAK,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;AACzE;AAEA,CADC;AACD;AAAC;AAAI;AAAkC;AAAyC;AAAI;AAAC;AAAI;AAAkC;AAAyC;AAAI;AAAC;AAAqC","sourcesContent":["import {HttpClient} from \"@angular/common/http\";\nimport {TranslateLoader} from \"@ngx-translate/core\";\nimport {Observable, forkJoin, of} from \"rxjs\";\nimport {catchError, map} from \"rxjs/operators\";\nimport merge from 'deepmerge';\n\n\nexport interface ITranslationResource {\n  prefix: string;\n  suffix: string;\n}\n\nexport class MultiTranslateHttpLoader implements TranslateLoader {\n  constructor(\n    private http: HttpClient,\n    private resources: ITranslationResource[],\n  ) {}\n\n  public getTranslation(lang: string): Observable<any> {\n    const requests = this.resources.map(resource => {\n      const path = resource.prefix + lang + resource.suffix;\n      return this.http.get(path).pipe(catchError(res => {\n        console.error(\"Could not find translation file:\", path);\n        return of({});\n      }));\n    });\n    return forkJoin(requests).pipe(map(response => merge.all(response)));\n  }\n}\n"]}